// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/01/2024 21:10:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ram
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ram_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] r_addr;
reg r_en;
reg [1:0] select;
reg [3:0] w_addr;
reg [7:0] w_data;
reg w_en;
// wires                                               
wire [31:0] r_data;

// assign statements (if any)                          
ram i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.r_addr(r_addr),
	.r_data(r_data),
	.r_en(r_en),
	.select(select),
	.w_addr(w_addr),
	.w_data(w_data),
	.w_en(w_en)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(16)
	begin
		clk = 1'b0;
		clk = #30000 1'b1;
		# 30000;
	end
	clk = 1'b0;
	clk = #30000 1'b1;
end 
// r_addr[ 3 ]
initial
begin
	r_addr[3] = 1'b0;
end 
// r_addr[ 2 ]
initial
begin
	r_addr[2] = 1'b1;
end 
// r_addr[ 1 ]
initial
begin
	r_addr[1] = 1'b0;
end 
// r_addr[ 0 ]
initial
begin
	r_addr[0] = 1'b0;
end 

// r_en
initial
begin
	r_en = 1'b0;
	r_en = #440000 1'b1;
	r_en = #70000 1'b0;
end 
// select[ 1 ]
initial
begin
	select[1] = 1'b0;
	select[1] = #440000 1'b1;
	select[1] = #100000 1'b0;
end 
// select[ 0 ]
initial
begin
	select[0] = 1'b0;
end 
// w_addr[ 3 ]
initial
begin
	w_addr[3] = 1'b0;
end 
// w_addr[ 2 ]
initial
begin
	w_addr[2] = 1'b0;
	w_addr[2] = #270000 1'b1;
	w_addr[2] = #120000 1'b0;
end 
// w_addr[ 1 ]
initial
begin
	w_addr[1] = 1'b0;
	w_addr[1] = #150000 1'b1;
	w_addr[1] = #120000 1'b0;
end 
// w_addr[ 0 ]
initial
begin
	w_addr[0] = 1'b0;
	w_addr[0] = #90000 1'b1;
	w_addr[0] = #60000 1'b0;
	w_addr[0] = #60000 1'b1;
	w_addr[0] = #60000 1'b0;
	w_addr[0] = #60000 1'b1;
	w_addr[0] = #60000 1'b0;
end 
// w_data[ 7 ]
initial
begin
	w_data[7] = 1'b1;
end 
// w_data[ 6 ]
initial
begin
	w_data[6] = 1'b1;
end 
// w_data[ 5 ]
initial
begin
	w_data[5] = 1'b1;
end 
// w_data[ 4 ]
initial
begin
	w_data[4] = 1'b1;
end 
// w_data[ 3 ]
initial
begin
	w_data[3] = 1'b0;
end 
// w_data[ 2 ]
initial
begin
	w_data[2] = 1'b0;
end 
// w_data[ 1 ]
initial
begin
	w_data[1] = 1'b0;
end 
// w_data[ 0 ]
initial
begin
	w_data[0] = 1'b0;
end 

// w_en
initial
begin
	w_en = 1'b1;
	w_en = #400000 1'b0;
end 
endmodule

